let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(fzf-maps-i) :call fzf#vim#maps('i', 0)
inoremap <expr> <Plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()
inoremap <expr> <Plug>(fzf-complete-line) fzf#vim#complete#line()
inoremap <expr> <Plug>(fzf-complete-file-ag) fzf#vim#complete#path('ag -l -g ""')
inoremap <expr> <Plug>(fzf-complete-file) fzf#vim#complete#path("find . -path '*/\.*' -prune -o -type f -print -o -type l -print | sed 's:^..::'")
inoremap <expr> <Plug>(fzf-complete-path) fzf#vim#complete#path("find . -path '*/\.*' -prune -o -print | sed '1d;s:^..::'")
inoremap <expr> <Plug>(fzf-complete-word) fzf#vim#complete#word()
inoremap <C-F11> :Maximize
inoremap <F11> :Fullscreen
inoremap <F6> :Open
inoremap <silent> <C-End> =g:MatchemRepeatFixupFlush("<c-end>")<C-End>
inoremap <silent> <End> =g:MatchemRepeatFixupFlush("<end>")<End>
inoremap <silent> <PageUp> =g:MatchemRepeatFixupFlush("<pageup>")<PageUp>
inoremap <silent> <Home> =g:MatchemRepeatFixupFlush("<home>")<Home>
inoremap <silent> <C-Down> =g:MatchemRepeatFixupFlush("<c-down>")<C-Down>
inoremap <silent> <S-Right> =g:MatchemRepeatFixupFlush("<s-right>")<S-Right>
inoremap <silent> <C-Home> =g:MatchemRepeatFixupFlush("<c-home>")<C-Home>
inoremap <silent> <PageDown> =g:MatchemRepeatFixupFlush("<pagedown>")<PageDown>
inoremap <silent> <Up> =g:MatchemRepeatFixupFlush("<up>")<Up>
inoremap <silent> <Down> =g:MatchemRepeatFixupFlush("<down>")<Down>
inoremap <silent> <Right> =g:MatchemRepeatFixupFlush("<right>")<Right>
inoremap <silent> <S-Up> =g:MatchemRepeatFixupFlush("<s-up>")<S-Up>
inoremap <silent> <C-Right> =g:MatchemRepeatFixupFlush("<c-right>")<C-Right>
inoremap <silent> <S-Left> =g:MatchemRepeatFixupFlush("<s-left>")<S-Left>
inoremap <silent> <C-Up> =g:MatchemRepeatFixupFlush("<c-up>")<C-Up>
inoremap <silent> <C-Left> =g:MatchemRepeatFixupFlush("<c-left>")<C-Left>
inoremap <silent> <S-Down> =g:MatchemRepeatFixupFlush("<s-down>")<S-Down>
inoremap <silent> <Left> =g:MatchemRepeatFixupFlush("<left>")<Left>
inoremap <silent> <Del> =g:MatchemMatchDelete("\<del>")
inoremap <silent> <F25> :silent doautocmd <nomodeline> FocusGained %
inoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()
nnoremap <silent>  :TmuxNavigateLeft
snoremap <silent>  c
xnoremap <silent> 	 :call UltiSnips#SaveLastVisualSelection()gvs
snoremap <silent> 	 :call UltiSnips#ExpandSnippet()
snoremap <silent> <NL> :call UltiSnips#JumpForwards()
nnoremap <silent> <NL> :TmuxNavigateDown
nnoremap <silent>  :TmuxNavigateUp
nnoremap <silent>  :TmuxNavigateRight
map  :NERDTreeToggle
map  :tabnew
map  :NERDTreeFind
nnoremap <silent>  :CtrlP
snoremap  "_c
nmap  :NERDTreeoggle
nnoremap <silent>  :TmuxNavigatePrevious
nmap - <Plug>VinegarUp
nmap ;n :call ToggleNerdTree()
map Q gq
nnoremap SD :!rm /Users/ges/.vim/.sessions/
nnoremap SL :!ls /Users/ges/.vim/.sessions
nnoremap SO :source /Users/ges/.vim/.sessions/
nnoremap SP :call Sessionist#PreviousSession()
nnoremap SC :call Sessionist#CurrentSession()
nnoremap SS :call Sessionist#SaveSession()
nnoremap SN :call Sessionist#NewSession()
xmap S <Plug>VSurround
vmap [% [%m'gv``
nmap [C 9999[c
nmap [c <Plug>(signify-prev-hunk)
map \ps :call MvnPickInherits() 
map \gs :call MvnFindInherits(expand("<cword>")) 
map \fc :call MvnFindJavaClass() 
map \bt :call MvnTagCurrentFile() 
map \bp :call MvnInsertProjectTree() 
map \be :call MvnBuildEnvSelection() 
map \ds :call MvnDownloadJavaSource() 
map \dd :call MvnDownloadJavadoc() 
map \sd :call MvnOpenJavaDoc(g:mvn_javadocPath) 
map \rt :call MvnRunJunit() 
map \rd :call MvnDoDebug() 
map \rj :call MvnJavacCompile() 
map \rm :call MvnCompile() 
nmap \ihn :IHN
nmap \is :IHS:A
nmap \ih :IHS
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
xmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
nnoremap <silent> \b :CommandTBuffer
nnoremap <silent> \t :CommandT
vmap ]% ]%m'gv``
vmap ]f :call PythonDec("function", 1)
nmap ]f :call PythonDec("function", 1)
omap ]f :call PythonDec("function", 1)
vmap ]F :call PythonDec("function", -1)
nmap ]F :call PythonDec("function", -1)
omap ]F :call PythonDec("function", -1)
vmap ]j :call PythonDec("class", 1)
nmap ]j :call PythonDec("class", 1)
omap ]j :call PythonDec("class", 1)
vmap ]J :call PythonDec("class", -1)
nmap ]J :call PythonDec("class", -1)
omap ]J :call PythonDec("class", -1)
map ]<Down> :call PythonNextLine(1)
map ]<Up> :call PythonNextLine(-1)
map ]d :call PythonSelectObject("function")
vmap ]u :call PythonUncommentSelection()
nmap ]u :call PythonUncommentSelection()
omap ]u :call PythonUncommentSelection()
vmap ]# :call PythonCommentSelection()
nmap ]# :call PythonCommentSelection()
omap ]# :call PythonCommentSelection()
vmap ]> >
nmap ]> ]tV]e>
omap ]> ]tV]e>
vmap ]< <
nmap ]< ]tV]e<
omap ]< ]tV]e<
map ]v ]tV]e
vmap ]e :PEoBm'gv``
nmap ]e :PEoB
omap ]e :PEoB
vmap ]t :PBOBm'gv``
nmap ]t :PBoB
omap ]t :PBoB
nmap ]C 9999]c
map ]c :call PythonSelectObject("class")
vmap a% [%v]%
nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
vmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
noremap <silent> gf :call gf_ext#run_handler_for_file(expand("<cfile>"),v:count)
xmap gS <Plug>VgSurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
onoremap <silent> <Plug>(fzf-maps-o) :call fzf#vim#maps('o', 0)
xnoremap <silent> <Plug>(fzf-maps-x) :call fzf#vim#maps('x', 0)
nnoremap <silent> <Plug>(fzf-maps-n) :call fzf#vim#maps('n', 0)
vnoremap <silent> <Plug>(calendar) :Calendar
nnoremap <silent> <Plug>(calendar) :Calendar
noremap <silent> <Plug>VimCommanderToggle :cal VimCommanderToggle()
nnoremap <C-F11> :Maximize
nnoremap <F11> :Fullscreen
nnoremap <F6> :Open
vnoremap <silent> <F25> :silent doautocmd <nomodeline> FocusGained %gv
vnoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %gv
onoremap <silent> <F25> :silent doautocmd <nomodeline> FocusGained %
onoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %
nnoremap <silent> <F25> :doautocmd <nomodeline> FocusGained %
nnoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %
xnoremap <silent> <Plug>(openbrowser-smart-search) :call openbrowser#_keymapping_smart_search('v')
nnoremap <silent> <Plug>(openbrowser-smart-search) :call openbrowser#_keymapping_smart_search('n')
xnoremap <silent> <Plug>(openbrowser-search) :call openbrowser#_keymapping_search('v')
nnoremap <silent> <Plug>(openbrowser-search) :call openbrowser#_keymapping_search('n')
xnoremap <silent> <Plug>(openbrowser-open) :call openbrowser#_keymapping_open('v')
nnoremap <silent> <Plug>(openbrowser-open) :call openbrowser#_keymapping_open('n')
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nnoremap <silent> <Plug>SurroundRepeat .
xnoremap <silent> <Plug>(signify-motion-outer-visual) :call sy#util#hunk_text_object(1)
onoremap <silent> <Plug>(signify-motion-outer-pending) :call sy#util#hunk_text_object(1)
xnoremap <silent> <Plug>(signify-motion-inner-visual) :call sy#util#hunk_text_object(0)
onoremap <silent> <Plug>(signify-motion-inner-pending) :call sy#util#hunk_text_object(0)
nnoremap <silent> <expr> <Plug>(signify-prev-hunk) &diff ? '[c' : ":\call sy#jump#prev_hunk(v:count1)\"
nnoremap <silent> <expr> <Plug>(signify-next-hunk) &diff ? ']c' : ":\call sy#jump#next_hunk(v:count1)\"
snoremap <silent> <Del> c
snoremap <silent> <BS> c
snoremap <silent> <C-Tab> :call UltiSnips#ListSnippets()
nnoremap <SNR>22_: :=v:count ? v:count : ''
vnoremap <silent> <F11> :cal VimCommanderToggle()
onoremap <silent> <F11> :cal VimCommanderToggle()
noremap <silent> <F12> :call quickmenu#toggle(0)
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-c>")
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-g>")
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =UltiSnips#ExpandSnippet()
inoremap <silent> <NL> =g:MatchemRepeatFixupFlush("<c-j>")=UltiSnips#JumpForwards()
inoremap <silent>  =g:MatchemExpandCr(1)
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-o>")
imap  <Plug>Isurround
inoremap  u
imap <silent> OC <Right>
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-[>")
imap \ihn :IHN
imap \is :IHS:A
imap \ih :IHS
let &cpo=s:cpo_save
unlet s:cpo_save
set autoread
set backspace=indent,eol,start
set backup
set completefunc=VjdeCompletionFun
set completeopt=menuone,longest,preview
set fileencodings=ucs-bom,utf-8,default,latin1
set hlsearch
set incsearch
set modelines=0
set mouse=a
set omnifunc=syntaxcomplete#Complete
set ruler
set runtimepath=~/.vim,~/.vim/bundle/Vundle.vim,~/.vim/bundle/vim-fugitive,~/.vim/bundle/command-t,~/.vim/bundle/sparkup/vim/,~/.vim/bundle/newL9,~/.vim/bundle/syntastic,~/.vim/bundle/vim-airline,~/.vim/bundle/ultisnips,~/.vim/bundle/vim-json,~/.vim/bundle/vim-snippets,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/vim-lawrencium,~/.vim/bundle/tagbar,~/.vim/bundle/vim-signify,~/.vim/bundle/gundo.vim,~/.vim/bundle/vim-sleuth,~/.vim/bundle/vim-surround,~/.vim/bundle/nerdcommenter,~/.vim/bundle/open-browser.vim,~/.vim/bundle/a.vim,~/.vim/bundle/molokai,~/.vim/bundle/vim-colorschemes,~/.vim/bundle/nerdtree,~/.vim/bundle/vim-markdown-preview,~/.vim/bundle/conque-shell,~/.vim/bundle/vim-tmux-navigator,~/.vim/bundle/vimux,~/.vim/bundle/python-mode,~/.vim/bundle/stackanswers.vim,~/.vim/bundle/vimsessionist,~/.vim/bundle/vim-tmux-focus-events,~/.vim/bundle/sessionman.vim,~/.vim/bundle/vim-websearch,~/.vim/bundle/Command-T,~/.vim/bundle/quickmenu.vim,~/.vim/bundle/vimterm,~/.vim/bundle/unite.vim,~/.vim/bundle/vim-autoswap,~/.vim/bundle/vim-eu
set showcmd
set smarttab
set tabstop=4
set wildcharm=26
set wildmenu
set window=0
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Work/Clients/FTpub/francetvpub
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +71 AwsDeploy/keys/Dockerfile.old
badd +14 AwsDeploy/keys/ipython_notebook_startup.sh
badd +16 AwsDeploy/keys/Dockerfile
argglobal
silent! argdel *
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=1 winheight=1 winminwidth=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 110 + 139) / 278)
exe 'vert 2resize ' . ((&columns * 167 + 139) / 278)
argglobal
enew
file NERD_tree_1
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-h>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNode)
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-o>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-q>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-s>")
xmap <buffer> ! .!
nmap <buffer> ! .!
nmap <buffer> - u
nnoremap <buffer> <silent> ? :call nerdtree#ui_glue#invokeKeyMap("?")
nnoremap <buffer> <silent> A :call nerdtree#ui_glue#invokeKeyMap("A")
nnoremap <buffer> <silent> B :call nerdtree#ui_glue#invokeKeyMap("B")
nnoremap <buffer> <silent> CD :call nerdtree#ui_glue#invokeKeyMap("CD")
nnoremap <buffer> <silent> C :call nerdtree#ui_glue#invokeKeyMap("C")
nnoremap <buffer> <silent> D :call nerdtree#ui_glue#invokeKeyMap("D")
nnoremap <buffer> <silent> E :call nerdtree#ui_glue#invokeKeyMap("E")
nnoremap <buffer> <silent> F :call nerdtree#ui_glue#invokeKeyMap("F")
nnoremap <buffer> <silent> I :call nerdtree#ui_glue#invokeKeyMap("I")
nnoremap <buffer> <silent> J :call nerdtree#ui_glue#invokeKeyMap("J")
nnoremap <buffer> <silent> K :call nerdtree#ui_glue#invokeKeyMap("K")
nnoremap <buffer> <silent> O :call nerdtree#ui_glue#invokeKeyMap("O")
nnoremap <buffer> <silent> P :call nerdtree#ui_glue#invokeKeyMap("P")
nnoremap <buffer> <silent> R :call nerdtree#ui_glue#invokeKeyMap("R")
nnoremap <buffer> <silent> T :call nerdtree#ui_glue#invokeKeyMap("T")
nnoremap <buffer> <silent> U :call nerdtree#ui_glue#invokeKeyMap("U")
nnoremap <buffer> <silent> X :call nerdtree#ui_glue#invokeKeyMap("X")
nnoremap <buffer> <silent> [c :call nerdtree#ui_glue#invokeKeyMap("[c")
nnoremap <buffer> <silent> ]c :call nerdtree#ui_glue#invokeKeyMap("]c")
nnoremap <buffer> <silent> cd :call nerdtree#ui_glue#invokeKeyMap("cd")
nnoremap <buffer> <silent> e :call nerdtree#ui_glue#invokeKeyMap("e")
nnoremap <buffer> <silent> f :call nerdtree#ui_glue#invokeKeyMap("f")
nnoremap <buffer> <silent> gi :call nerdtree#ui_glue#invokeKeyMap("gi")
nnoremap <buffer> <silent> gs :call nerdtree#ui_glue#invokeKeyMap("gs")
nnoremap <buffer> <silent> i :call nerdtree#ui_glue#invokeKeyMap("i")
nnoremap <buffer> <silent> m :call nerdtree#ui_glue#invokeKeyMap("m")
nnoremap <buffer> <silent> o :call nerdtree#ui_glue#invokeKeyMap("o")
nnoremap <buffer> <silent> p :call nerdtree#ui_glue#invokeKeyMap("p")
nnoremap <buffer> <silent> q :call nerdtree#ui_glue#invokeKeyMap("q")
nnoremap <buffer> <silent> r :call nerdtree#ui_glue#invokeKeyMap("r")
nnoremap <buffer> <silent> s :call nerdtree#ui_glue#invokeKeyMap("s")
nnoremap <buffer> <silent> t :call nerdtree#ui_glue#invokeKeyMap("t")
nnoremap <buffer> <silent> u :call nerdtree#ui_glue#invokeKeyMap("u")
nnoremap <buffer> <silent> x :call nerdtree#ui_glue#invokeKeyMap("x")
nnoremap <buffer> ~ :edit ~/
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> <silent> <2-LeftMouse> :call nerdtree#ui_glue#invokeKeyMap("<2-LeftMouse>")
nnoremap <buffer> <silent> <LeftRelease> <LeftRelease>:call nerdtree#ui_glue#invokeKeyMap("<LeftRelease>")
nnoremap <buffer> <silent> <MiddleRelease> :call nerdtree#ui_glue#invokeKeyMap("<MiddleRelease>")
inoremap <buffer> <silent> " "=g:MatchemMatchStart()
inoremap <buffer> <silent> ' '=g:MatchemMatchStart()
inoremap <buffer> <silent> ( (=g:MatchemMatchStart()
inoremap <buffer> <silent> ) =g:MatchemMatchEnd(")")
inoremap <buffer> <silent> [ [=g:MatchemMatchStart()
inoremap <buffer> <silent> ] =g:MatchemMatchEnd("]")
inoremap <buffer> <silent> { {=g:MatchemMatchStart()
inoremap <buffer> <silent> } =g:MatchemMatchEnd("}")
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal completefunc=VjdeCompletionFun
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'nerdtree'
setlocal filetype=nerdtree
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal signcolumn=auto
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'nerdtree'
setlocal syntax=nerdtree
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal winfixwidth
setlocal nowrap
setlocal wrapmargin=0
wincmd w
argglobal
enew
file NERD_tree_2
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-h>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNode)
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-o>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-q>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-s>")
xmap <buffer> ! .!
nmap <buffer> ! .!
nmap <buffer> - u
nnoremap <buffer> <silent> ? :call nerdtree#ui_glue#invokeKeyMap("?")
nnoremap <buffer> <silent> A :call nerdtree#ui_glue#invokeKeyMap("A")
nnoremap <buffer> <silent> B :call nerdtree#ui_glue#invokeKeyMap("B")
nnoremap <buffer> <silent> CD :call nerdtree#ui_glue#invokeKeyMap("CD")
nnoremap <buffer> <silent> C :call nerdtree#ui_glue#invokeKeyMap("C")
nnoremap <buffer> <silent> D :call nerdtree#ui_glue#invokeKeyMap("D")
nnoremap <buffer> <silent> E :call nerdtree#ui_glue#invokeKeyMap("E")
nnoremap <buffer> <silent> F :call nerdtree#ui_glue#invokeKeyMap("F")
nnoremap <buffer> <silent> I :call nerdtree#ui_glue#invokeKeyMap("I")
nnoremap <buffer> <silent> J :call nerdtree#ui_glue#invokeKeyMap("J")
nnoremap <buffer> <silent> K :call nerdtree#ui_glue#invokeKeyMap("K")
nnoremap <buffer> <silent> O :call nerdtree#ui_glue#invokeKeyMap("O")
nnoremap <buffer> <silent> P :call nerdtree#ui_glue#invokeKeyMap("P")
nnoremap <buffer> <silent> R :call nerdtree#ui_glue#invokeKeyMap("R")
nnoremap <buffer> <silent> T :call nerdtree#ui_glue#invokeKeyMap("T")
nnoremap <buffer> <silent> U :call nerdtree#ui_glue#invokeKeyMap("U")
nnoremap <buffer> <silent> X :call nerdtree#ui_glue#invokeKeyMap("X")
nnoremap <buffer> <silent> [c :call nerdtree#ui_glue#invokeKeyMap("[c")
nnoremap <buffer> <silent> ]c :call nerdtree#ui_glue#invokeKeyMap("]c")
nnoremap <buffer> <silent> cd :call nerdtree#ui_glue#invokeKeyMap("cd")
nnoremap <buffer> <silent> e :call nerdtree#ui_glue#invokeKeyMap("e")
nnoremap <buffer> <silent> f :call nerdtree#ui_glue#invokeKeyMap("f")
nnoremap <buffer> <silent> gi :call nerdtree#ui_glue#invokeKeyMap("gi")
nnoremap <buffer> <silent> gs :call nerdtree#ui_glue#invokeKeyMap("gs")
nnoremap <buffer> <silent> i :call nerdtree#ui_glue#invokeKeyMap("i")
nnoremap <buffer> <silent> m :call nerdtree#ui_glue#invokeKeyMap("m")
nnoremap <buffer> <silent> o :call nerdtree#ui_glue#invokeKeyMap("o")
nnoremap <buffer> <silent> p :call nerdtree#ui_glue#invokeKeyMap("p")
nnoremap <buffer> <silent> q :call nerdtree#ui_glue#invokeKeyMap("q")
nnoremap <buffer> <silent> r :call nerdtree#ui_glue#invokeKeyMap("r")
nnoremap <buffer> <silent> s :call nerdtree#ui_glue#invokeKeyMap("s")
nnoremap <buffer> <silent> t :call nerdtree#ui_glue#invokeKeyMap("t")
nnoremap <buffer> <silent> u :call nerdtree#ui_glue#invokeKeyMap("u")
nnoremap <buffer> <silent> x :call nerdtree#ui_glue#invokeKeyMap("x")
nnoremap <buffer> ~ :edit ~/
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> <silent> <2-LeftMouse> :call nerdtree#ui_glue#invokeKeyMap("<2-LeftMouse>")
nnoremap <buffer> <silent> <LeftRelease> <LeftRelease>:call nerdtree#ui_glue#invokeKeyMap("<LeftRelease>")
nnoremap <buffer> <silent> <MiddleRelease> :call nerdtree#ui_glue#invokeKeyMap("<MiddleRelease>")
inoremap <buffer> <silent> " "=g:MatchemMatchStart()
inoremap <buffer> <silent> ' '=g:MatchemMatchStart()
inoremap <buffer> <silent> ( (=g:MatchemMatchStart()
inoremap <buffer> <silent> ) =g:MatchemMatchEnd(")")
inoremap <buffer> <silent> [ [=g:MatchemMatchStart()
inoremap <buffer> <silent> ] =g:MatchemMatchEnd("]")
inoremap <buffer> <silent> { {=g:MatchemMatchStart()
inoremap <buffer> <silent> } =g:MatchemMatchEnd("}")
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal completefunc=VjdeCompletionFun
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'nerdtree'
setlocal filetype=nerdtree
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal signcolumn=auto
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(2)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'nerdtree'
setlocal syntax=nerdtree
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 110 + 139) / 278)
exe 'vert 2resize ' . ((&columns * 167 + 139) / 278)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
set winminheight=1 winminwidth=1
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
