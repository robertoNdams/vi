let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
noremap! <silent> <Plug>(resizewin-full) :FullSize
noremap! <silent> <Plug>(resizewin-expand-x) :ResizeWinEX
noremap! <silent> <Plug>(resizewin-contract-y) :ResizeWinCY
noremap! <silent> <Plug>(resizewin-expand-y) :ResizeWinEY
noremap! <silent> <Plug>(resizewin-contract-x) :ResizeWinCX
inoremap <silent> <F10> :silent call Run(&ft)
inoremap <C-F11> :Maximize
inoremap <F11> :Fullscreen
inoremap <F6> :Open
inoremap <silent> <PageUp> =g:MatchemRepeatFixupFlush("<pageup>")<PageUp>
inoremap <silent> <Home> =g:MatchemRepeatFixupFlush("<home>")<Home>
inoremap <silent> <C-Down> =g:MatchemRepeatFixupFlush("<c-down>")<C-Down>
inoremap <silent> <S-Right> =g:MatchemRepeatFixupFlush("<s-right>")<S-Right>
inoremap <silent> <End> =g:MatchemRepeatFixupFlush("<end>")<End>
inoremap <silent> <PageDown> =g:MatchemRepeatFixupFlush("<pagedown>")<PageDown>
inoremap <silent> <Up> =g:MatchemRepeatFixupFlush("<up>")<Up>
inoremap <silent> <Down> =g:MatchemRepeatFixupFlush("<down>")<Down>
inoremap <silent> <Right> =g:MatchemRepeatFixupFlush("<right>")<Right>
inoremap <silent> <S-Up> =g:MatchemRepeatFixupFlush("<s-up>")<S-Up>
inoremap <silent> <C-Right> =g:MatchemRepeatFixupFlush("<c-right>")<C-Right>
inoremap <silent> <S-Left> =g:MatchemRepeatFixupFlush("<s-left>")<S-Left>
inoremap <silent> <C-Home> =g:MatchemRepeatFixupFlush("<c-home>")<C-Home>
inoremap <silent> <C-End> =g:MatchemRepeatFixupFlush("<c-end>")<C-End>
inoremap <silent> <C-Up> =g:MatchemRepeatFixupFlush("<c-up>")<C-Up>
inoremap <silent> <C-Left> =g:MatchemRepeatFixupFlush("<c-left>")<C-Left>
inoremap <silent> <S-Down> =g:MatchemRepeatFixupFlush("<s-down>")<S-Down>
inoremap <silent> <Left> =g:MatchemRepeatFixupFlush("<left>")<Left>
inoremap <silent> <Del> =g:MatchemMatchDelete("\<del>")
inoremap <silent> <BS> =g:MatchemMatchBackspace("\<bs>")
inoremap <silent> <F25> :silent doautocmd <nomodeline> FocusGained %
inoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()
inoremap <silent> <C-Space> =UltiSnips#ExpandSnippet()
map! <D-v> *
nnoremap <silent>  :TmuxNavigateLeft
snoremap <silent>  c
nnoremap <silent> <NL> :TmuxNavigateDown
nnoremap <silent>  :TmuxNavigateUp
nnoremap <silent>  :TmuxNavigateRight
map  :NERDTreeToggle
xnoremap <silent>  :call multiple_cursors#new("v", 0)
nnoremap <silent>  :call multiple_cursors#new("n", 1)
smap  :tabnew
omap  :tabnew
map  :NERDTreeFind
map  <Plug>(ctrlp)
snoremap  "_c
nmap  :SrcExplToggle 
nmap  :NERDTreeoggle
nnoremap <silent>  :TmuxNavigatePrevious
nmap ;n :call ToggleNerdTree()
map Q gq
nnoremap SD :!rm /Users/ges/.vim/.sessions/
nnoremap SL :!ls /Users/ges/.vim/.sessions
nnoremap SO :call Sessionist#OpenSession()
nnoremap SP :call Sessionist#PreviousSession()
nnoremap SC :call Sessionist#CurrentSession()
nnoremap SS :call Sessionist#SaveSession()
nnoremap SN :call Sessionist#NewSession()
xmap S <Plug>VSurround
nmap [C 9999[c
nmap [c <Plug>(signify-prev-hunk)
nmap \kt :VikubeTop
nmap \ksvc :VikubeServiceList
nmap \kpv :VikubePVList
nmap \kpvc :VikubePVCList
nmap \kpo :VikubePodList
nmap \kno :VikubeNodeList
nmap \kc :VikubeContextList
nnoremap \atob/ :%s/\v()/\=base64#decode(submatch(1))/<Home><Right><Right><Right><Right><Right><Right>
nnoremap \btoa/ :%s/\v()/\=base64#encode(submatch(1))/<Home><Right><Right><Right><Right><Right><Right>
vnoremap <silent> \btoa :call base64#v_btoa()
vnoremap <silent> \atob :call base64#v_atob()
nmap <silent> \ig <Plug>IndentGuidesToggle
nmap \\z <Plug>ZVKeyDocset
vmap \z <Plug>ZVVisSelection
nmap \z <Plug>Zeavim
nmap \ihn :IHN
nmap \is :IHS:A
nmap \ih :IHS
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
xmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
nnoremap <silent> \b :CommandTBuffer
nnoremap <silent> \t :CommandT
nmap ]C 9999]c
nmap ]c <Plug>(signify-next-hunk)
nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
vmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
xnoremap <silent> g√Æ :call multiple_cursors#select_all("v", 0)
nnoremap <silent> g√Æ :call multiple_cursors#select_all("n", 0)
xnoremap <silent> g :call multiple_cursors#new("v", 0)
nnoremap <silent> g :call multiple_cursors#new("n", 0)
nmap gz <Plug>ZVOperator
xmap gS <Plug>VgSurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <SNR>236_: :=v:count ? v:count : ''
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
nnoremap <silent> <Plug>(ctrlp) :CtrlP
nnoremap <silent> <Plug>(startify-open-buffers) :call startify#open_buffers()
noremap <silent> <Plug>(resizewin-full) :FullSize
noremap <silent> <Plug>(resizewin-expand-x) :ResizeWinEX
noremap <silent> <Plug>(resizewin-contract-y) :ResizeWinCY
noremap <silent> <Plug>(resizewin-expand-y) :ResizeWinEY
noremap <silent> <Plug>(resizewin-contract-x) :ResizeWinCX
nmap <Plug>ZVMotion <Plug>ZVOperator
nnoremap <silent> <C-Right> :CmdResizeRight
nnoremap <silent> <C-Up> :CmdResizeUp
nnoremap <silent> <C-Down> :CmdResizeDown
nnoremap <silent> <C-Left> :CmdResizeLeft
nnoremap <silent> <F10> :silent call Run(&ft)
noremap <silent> <Plug>VimCommanderToggle :cal VimCommanderToggle()
nnoremap <C-F11> :Maximize
nnoremap <F11> :Fullscreen
nnoremap <F6> :Open
vnoremap <silent> <F25> :silent doautocmd <nomodeline> FocusGained %gv
vnoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %gv
onoremap <silent> <F25> :silent doautocmd <nomodeline> FocusGained %
onoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %
nnoremap <silent> <F25> :doautocmd <nomodeline> FocusGained %
nnoremap <silent> <F24> :silent doautocmd <nomodeline> FocusLost %
xnoremap <silent> <Plug>(openbrowser-smart-search) :call openbrowser#_keymap_smart_search('v')
nnoremap <silent> <Plug>(openbrowser-smart-search) :call openbrowser#_keymap_smart_search('n')
xnoremap <silent> <Plug>(openbrowser-search) :call openbrowser#_keymap_search('v')
nnoremap <silent> <Plug>(openbrowser-search) :call openbrowser#_keymap_search('n')
xnoremap <silent> <Plug>(openbrowser-open) :call openbrowser#_keymap_open('v')
nnoremap <silent> <Plug>(openbrowser-open) :call openbrowser#_keymap_open('n')
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nnoremap <silent> <Plug>SurroundRepeat .
xnoremap <silent> <Plug>(signify-motion-outer-visual) :call sy#util#hunk_text_object(1)
onoremap <silent> <Plug>(signify-motion-outer-pending) :call sy#util#hunk_text_object(1)
xnoremap <silent> <Plug>(signify-motion-inner-visual) :call sy#util#hunk_text_object(0)
onoremap <silent> <Plug>(signify-motion-inner-pending) :call sy#util#hunk_text_object(0)
nnoremap <silent> <expr> <Plug>(signify-prev-hunk) &diff ? '[c' : ":\call sy#jump#prev_hunk(v:count1)\"
nnoremap <silent> <expr> <Plug>(signify-next-hunk) &diff ? ']c' : ":\call sy#jump#next_hunk(v:count1)\"
snoremap <silent> <Del> c
snoremap <silent> <BS> c
snoremap <silent> <C-Tab> :call UltiSnips#ListSnippets()
xnoremap <silent> <C-Space> :call UltiSnips#SaveLastVisualSelection()gvs
snoremap <silent> <C-Space> :call UltiSnips#ExpandSnippet()
vnoremap <silent> <F11> :cal VimCommanderToggle()
onoremap <silent> <F11> :cal VimCommanderToggle()
noremap <silent> <F12> :call quickmenu#toggle(0)
xmap <BS> "-d
vmap <D-x> "*d
vmap <D-c> "*y
vmap <D-v> "-d"*P
nmap <D-v> "*P
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-c>")
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-g>")
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent>  =g:MatchemExpandCr(1)
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-o>")
imap  <Plug>Isurround
inoremap  u
imap  :stop!
imap <silent> OC <Right>
inoremap <silent>  =g:MatchemRepeatFixupFlush("<c-[>")
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap ( ()<Left>
xnoremap <silent> √Æ :call multiple_cursors#select_all("v", 0)
nnoremap <silent> √Æ :call multiple_cursors#select_all("n", 1)
inoremap [ []<Left>
imap \ihn :IHN
imap \is :IHS:A
imap \ih :IHS
inoremap {; {};O
inoremap { {}O
inoremap { {}<Left>
cabbr phpx call Run('php')
cabbr rubyx call Run('ruby')
cabbr perlx call Run('perl')
cabbr pyx call Run('python')
cabbr shx call Run('bash')
cabbr sx call Run(&ft)
let &cpo=s:cpo_save
unlet s:cpo_save
set autowrite
set background=dark
set backspace=indent,eol,start
set backup
set completeopt=longest,menuone,longest,preview
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set hidden
set history=100
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set mouse=a
set omnifunc=syntaxcomplete#Complete
set pyxversion=3
set ruler
set runtimepath=~/.vim,~/.vim/pack/plugins/start/vim-go,~/.vim/bundle/Vundle.vim,~/.vim/bundle/vim-fugitive,~/.vim/bundle/command-t,~/.vim/bundle/sparkup/vim/,~/.vim/bundle/newL9,~/.vim/bundle/syntastic,~/.vim/bundle/vim-airline,~/.vim/bundle/ultisnips,~/.vim/bundle/vim-json,~/.vim/bundle/vim-snippets,~/.vim/bundle/vim-lawrencium,~/.vim/bundle/vim-signify,~/.vim/bundle/gundo.vim,~/.vim/bundle/vim-sleuth,~/.vim/bundle/vim-surround,~/.vim/bundle/nerdcommenter,~/.vim/bundle/open-browser.vim,~/.vim/bundle/a.vim,~/.vim/bundle/molokai,~/.vim/bundle/vim-colorschemes,~/.vim/bundle/nerdtree,~/.vim/bundle/vim-markdown-preview,~/.vim/bundle/conque-shell,~/.vim/bundle/vim-tmux-navigator,~/.vim/bundle/vimux,~/.vim/bundle/python-mode,~/.vim/bundle/stackanswers.vim,~/.vim/bundle/vimsessionist,~/.vim/bundle/vim-tmux-focus-events,~/.vim/bundle/sessionman.vim,~/.vim/bundle/vim-websearch,~/.vim/bundle/Command-T,~/.vim/bundle/quickmenu.vim,~/.vim/bundle/vimterm,~/.vim/bundle/unite.vim,~/.vim/bundle/vim-autoswap,~/.vim/bundle/vim-eunuch,~/.vim/
set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal,tabpages,globals
set shiftround
set shiftwidth=4
set shortmess=filnxtToOI
set showcmd
set smartindent
set smarttab
set softtabstop=4
set splitbelow
set splitright
set statusline=%#warningmsg#%{SyntasticStatuslineFlag()}%*
set noswapfile
set tabline=%!TabooTabline()
set tabstop=4
set title
set updatetime=200
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
let NERDTreeMapPreviewSplit = "gi"
let NERDTreeShowHidden = "0"
let Tlist_Show_One_File =  0 
let NERDTreeMinimalUI =  1 
let NERDUsePlaceHolders = "1"
let WebDevIconsNerdTreeGitPluginForceVAlign =  1 
let NERDTreeRespectWildIgnore = "0"
let NERDTreeMapToggleHidden = "I"
let NERDTreeWinSize =  62 
let UltiSnipsRemoveSelectModeMappings =  1 
let MatchemExpandCr =  1 
let ConqueTerm_PyExe = ""
let NERDTreeMapMenu = "m"
let NERDTreeMapJumpParent = "p"
let WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = "Óòì"
let NERDTreeAutoCenter = "1"
let BASH_MapLeader = ""
let NERDTreeShowBookmarks = "0"
let NERDTreeMouseMode = "1"
let NERDTreeCreatePrefix = "silent"
let ConqueTerm_InsertCharPre =  0 
let NERDTreeShowGitStatus =  1 
let NERDTreeMapOpenSplit = "i"
let ZF_nerdtree_menu_quit_loaded =  1 
let NERDTreeHighlightCursorline = "1"
let UltiSnipsExpandTrigger = "<c-Space>"
let Tlist_GainFocus_On_ToggleOpen =  0 
let ConqueTerm_CloseOnEnd =  0 
let NERDCreateDefaultMappings = "1"
let ConqueTerm_InsertOnEnter =  0 
let NERDTreeMapPreviewVSplit = "gs"
let ConqueTerm_ToggleKey = "<F8>"
let NERDTreeMapJumpRoot = "P"
let NERDTreeGlyphReadOnly = "RO"
let NERDTreeMapRefreshRoot = "R"
let NERDTreeCascadeOpenSingleChildDir = "1"
let NERDTreeMapOpenVSplit = "s"
let NERDTrimTrailingWhitespace =  1 
let NERDTreeMapDeleteBookmark = "D"
let NERDTreeAutoCenterThreshold = "3"
let UltiSnipsEditSplit = "vertical"
let ConqueTerm_TERM = "vt100"
let ConqueTerm_PromptRegex = "^\\w\\+@[0-9A-Za-z_.-]\\+:[0-9A-Za-z_./\\~,:-]\\+\\$"
let BASH_Dictionary_File = "/Users/ges/.vim/bundle/bash-support.vim/bash-support/wordlists/bash-keywords.list"
let NERDTreeMapJumpFirstChild = "K"
let CMP_Recurse_Limit =  0 
let NERDTreeMapToggleBookmarks = "B"
let WebDevIconsTabAirLineBeforeGlyphPadding = " "
let Tlist_Sort_Type = "order"
let Tlist_Compact_Format =  0 
let ConqueTerm_SendFileKey = "<F10>"
let ConqueTerm_SendFunctionKeys =  0 
let NERDTreeBookmarksFile = "/Users/ges/.NERDTreeBookmarks"
let UltiSnipsJumpForwardTrigger = "<c-y>"
let HiCursorWords_hiGroupRegexp = ""
let Tlist_Ctags_Cmd = "ctags"
let SrcExpl_gobackKey = "<SPACE>"
let Taboo_tabs = ""
let SrcExpl_updateTagsKey = "<F12>"
let NERDTreeDirArrowExpandable = "‚ñ∏"
let WebDevIconsUnicodeDecorateFileNodes =  1 
let NERDCommentEmptyLines =  1 
let MatchemExpandNl =  1 
let MatchemRepeatFixup =  1 
let Tlist_Display_Tag_Scope =  1 
let NERDTreeMapOpenInTabSilent = "T"
let NERDTreeMapHelp = "?"
let ZF_nerdtree_menu_copypath_loaded =  1 
let NERDTreeMapJumpPrevSibling = "<C-q>"
let NERDDefaultNesting = "1"
let NERDTreeMapOpenInTab = "t"
let NERDTreeChDirMode = "0"
let Tlist_Highlight_Tag_On_BufEnter =  1 
let ConqueTerm_CodePage =  0 
let NERDTreeShowFiles = "1"
let HiCursorWords_delay =  200 
let ConqueTerm_StartMessages =  1 
let NERDTreeHijackNetrw =  0 
let Tlist_Max_Submenu_Items =  20 
let NERDTreeBookmarksSort = "1"
let ConqueTerm_ExecFileKey = "<F11>"
let HiCursorWords_debugEchoHiName =  0 
let UltiSnipsJumpBackwardTrigger = "<c-z>"
let NERDTreeMapToggleFilters = "f"
let SrcExpl_winHeight =  8 
let Tlist_WinWidth =  30 
let WebDevIconsUnicodeDecorateFolderNodesSymlinkSymbol = "ÔíÇ"
let NERDBlockComIgnoreEmpty = "0"
let Tlist_Close_On_Select =  0 
let Tlist_File_Fold_Auto_Close =  0 
let NERDDisableTabsInBlockComm = "0"
let NERDTreeUpdateOnCursorHold =  1 
let DevIconsDefaultFolderOpenSymbol = "Óóæ"
let BASH_Version = "4.2.1"
let SrcExpl_isUpdateTags =  0 
let NERDTreeSortDirs = "1"
let NERDTreeMapToggleFiles = "F"
let NERDAllowAnyVisualDelims = "1"
let ConqueTerm_Idx =  0 
let NERDTreeMapOpenRecursively = "O"
let NERDTreeMapUpdirKeepOpen = "U"
let Tlist_Show_Menu =  0 
let NERDTreeMapCloseChildren = "X"
let Tlist_Use_SingleClick =  0 
let UltiSnipsUsePythonVersion =  3 
let NERDTreeMapCloseDir = "x"
let NERDTreeSortHiddenFirst = "1"
let SrcExpl_jumpKey = "<ENTER>"
let UltiSnipsEnableSnipMate =  1 
let NERDTreeAutoDeleteBuffer =  0 
let ZF_nerdtree_menu_quit_shortcut = "q"
let DevIconsEnableFoldersOpenClose =  0 
let Tlist_Enable_Fold_Column =  1 
let NERDTreeMapPreview = "<C-h>"
let NERDTreeCascadeSingleChildDir = "1"
let DevIconsEnableFolderPatternMatching =  1 
let NERDTreeShowIgnoredStatus =  0 
let SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
let MatchemEndOfLineMapping =  0 
let TagList_title = "__Tag_List__"
let WebDevIconsTabAirLineAfterGlyphPadding = ""
let NERDMenuMode = "3"
let NERDTreeRemoveDirCmd = "rm -rf "
let NERDToggleCheckAllLines =  1 
let NERDTreeCaseSensitiveSort = "0"
let SrcExpl_searchLocalDef =  1 
let ConqueTerm_PyVersion =  2 
let NERDTreeMapPrevHunk = "[c"
let NERDTreeMapRefresh = "r"
let WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ""
let WebDevIconsNerdTreeBeforeGlyphPadding = " "
let DevIconsAppendArtifactFix =  0 
let NERDDefaultAlign = "right"
let WebDevIconsUnicodeDecorateFolderNodes =  1 
let NERDTreeMapNextHunk = "]c"
let WebDevIconsUnicodeGlyphDoubleWidth =  1 
let WebDevIconsUnicodeDecorateFolderNodesExactMatches =  1 
let Tlist_Exit_OnlyWindow =  0 
let Tlist_Max_Tag_Length =  10 
let BASH_CodeSnippets = "/Users/ges/.vim/bundle/bash-support.vim/bash-support/codesnippets/"
let UltiSnipsListSnippets = "<c-tab>"
let Tlist_Auto_Open =  0 
let WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = "Óòí"
let SrcExpl_nestedAutoCmd =  1 
let ConqueTerm_SendVisKey = "<F9>"
let NERDTreeMapChangeRoot = "C"
let NERDCompactSexyComs =  1 
let DevIconsEnableFolderExtensionPatternMatching =  0 
let ConqueTerm_CWInsert =  0 
let NERDTreeMapOpenExpl = "e"
let ConqueTerm_EscKey = "<Esc>"
let ConqueTerm_Color =  1 
let ConqueTerm_Version =  230 
let Tlist_Auto_Highlight_Tag =  1 
let NERDTreeShowLineNumbers =  1 
let SrcExpl_refreshTime =  100 
let Tlist_Use_Horiz_Window =  0 
let WebDevIconsNerdTreeAfterGlyphPadding = " "
let Tlist_Process_File_Always =  0 
let ConqueTerm_ColorMode = ""
let NERDTreeNotificationThreshold = "100"
let NERDTreeMapActivateNode = "<C-o>"
let NERDTreeWinPos = "left"
let NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"
let ConqueTerm_FastMode =  0 
let NERDTreeNodeDelimiter = "¬†"
let DevIconsArtifactFixChar = " "
let SimpylFold_docstring_preview =  1 
let Tlist_Auto_Update =  1 
let NERDSpaceDelims =  1 
let SrcExpl_prevDefKey = "<c-p>"
let NERDAltDelims_java =  1 
let NERDLPlace = "[>"
let Tlist_WinHeight =  10 
let NERDRemoveExtraSpaces = "0"
let Tlist_Inc_Winwidth =  1 
let NERDTreeMapCWD = "CD"
let NERDTreeNaturalSort = "0"
let NERDTreeMapUpdir = "u"
let NERDCommentWholeLinesInVMode = "0"
let MatchemMaxMatchSearchDepth =  100 
let NERDTreeMapChdir = "cd"
let NERDRPlace = "<]"
let NERDTreeMapToggleZoom = "A"
let NERDTreeMarkBookmarks = "1"
let Tlist_Display_Prototype =  0 
let NERDTreeUpdateOnWrite =  1 
let NERDRemoveAltComs = "1"
let NERDTreeMapJumpLastChild = "J"
let ConqueTerm_ReadUnfocused =  0 
let NERDTreeMapJumpNextSibling = "<C-s>"
let NERDTreeCopyCmd = "cp -r "
let NERDTreeMapQuit = "q"
let ConqueTerm_SessionSupport =  0 
let NERDTreeDirArrows =  1 
let NERDTreeToggle = "<C-m>"
let Tlist_Use_Right_Window =  0 
let NERDTreeDirArrowCollapsible = "‚ñæ"
let DevIconsEnableNERDTreeRedraw =  0 
let SrcExpl_nextDefKey = "<c-n>"
let ConqueTerm_Loaded =  1 
let ConqueTerm_Syntax = "conque_term"
let NERDTreeQuitOnOpen = "0"
silent only
silent tabonly
cd ~/Work/Clients/amaury/git-amaury/ArchitectureGCP/apiRunnerDailymotion
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 ~/.oh-my-zsh/plugins/vagrant/vagrant.plugin.zsh
argglobal
silent! argdel *
$argadd ~/.oh-my-zsh/plugins/vagrant/vagrant.plugin.zsh
edit ~/.oh-my-zsh/plugins/vagrant/vagrant.plugin.zsh
set splitbelow splitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
argglobal
vnoremap <buffer> 	 :py3 isort_visual()
inoremap <buffer> <silent> " "=g:MatchemMatchStart()
inoremap <buffer> <silent> ' '=g:MatchemMatchStart()
inoremap <buffer> <silent> ( (=g:MatchemMatchStart()
inoremap <buffer> <silent> ) =g:MatchemMatchEnd(")")
inoremap <buffer> <silent> [ [=g:MatchemMatchStart()
inoremap <buffer> <silent> ] =g:MatchemMatchEnd("]")
inoremap <buffer> <silent> { {=g:MatchemMatchStart()
inoremap <buffer> <silent> } =g:MatchemMatchEnd("}")
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'zsh'
setlocal filetype=zsh
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetShIndent()
setlocal indentkeys=0{,0},!^F,o,O,e,=then,=do,=else,=elif,=esac,=fi,=fin,=fil,=done
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal signcolumn=auto
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'zsh'
setlocal syntax=zsh
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 16) / 32)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOI
set winminheight=1 winminwidth=1
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
